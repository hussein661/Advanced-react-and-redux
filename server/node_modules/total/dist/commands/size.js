"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const error_1 = require("lib/error");
const file_1 = require("lib/file");
const command_1 = require("lib/command");
var Unit;
(function (Unit) {
    Unit["Byte"] = "b";
    Unit["Kilobyte"] = "kb";
    Unit["Megabyte"] = "mb";
    Unit["Gigabyte"] = "gb";
})(Unit = exports.Unit || (exports.Unit = {}));
const bytes = (bytes) => (target) => {
    switch (target) {
        case "b" /* Byte */:
            return bytes;
        case "kb" /* Kilobyte */:
            return bytes / 1000;
        case "mb" /* Megabyte */:
            return bytes / 1000 / 1000;
        case "gb" /* Gigabyte */:
            return bytes / 1000 / 1000 / 1000;
        default:
            return bytes;
    }
};
function getSize(stdin) {
    return __awaiter(this, void 0, void 0, function* () {
        let stat;
        try {
            stat = yield file_1.stats(stdin.split('\n').filter((path) => path));
        }
        catch (error) {
            throw new error_1.FileNotFound(stdin.replace('\n', ' '));
        }
        const totalSize = stat.reduce((prev, next) => next.size + prev, 0);
        return totalSize;
    });
}
class Size {
    config() {
        const config = {
            name: 'size',
            description: 'File size. From a list of file paths (separated by a line break), get' +
                'the total size (defaults to bytes)',
            options: [
                {
                    name: 'path',
                    flags: '-p, --path [path]',
                    description: 'directory/file path.',
                },
                { name: 'unit', flags: '-u, --unit [unit]', description: 'Unit size.' },
            ],
        };
        return config;
    }
    onRun(stdin, args) {
        return __awaiter(this, void 0, void 0, function* () {
            let totalSize = yield getSize(stdin);
            if (command_1.hasArgs('path', args)) {
                const path = command_1.getArg('path', args);
                const files = yield file_1.glob(path.value);
                const allFiles = yield Promise.all(files.map(getSize));
                const dirSize = allFiles.reduce((prev, next) => prev + next, 0);
                totalSize = totalSize + dirSize;
            }
            const unit = command_1.getArg('unit', args);
            totalSize = unit ? bytes(totalSize)(unit.value) : totalSize;
            return String(totalSize);
        });
    }
}
exports.default = Size;
