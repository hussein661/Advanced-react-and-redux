"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("lib/command");
class TextProcessor {
    chars(content) {
        return content.split('').length;
    }
    words(content) {
        return content.match(/\w+/g).length;
    }
    lines(content) {
        return content.split('\n').length;
    }
    longestLine(content) {
        const lines = content.split('\n');
        const longest = lines.reduce((best, line) => {
            return line.length > best ? line.length : best;
        }, 0);
        return longest;
    }
}
exports.TextProcessor = TextProcessor;
class Tp extends TextProcessor {
    config() {
        const config = {
            name: 'tp',
            description: 'Text Processor. [L] Length of the longest line. [l] Number of Lines. [w] Number of words. [c] Number of characters.',
            options: [
                {
                    name: 'count',
                    flags: '-c, --count [count]',
                    description: 'Count the number of words',
                },
                {
                    name: 'lline',
                    flags: '-L, --lline [Lline]',
                    description: 'returns the longest line.',
                },
                {
                    name: 'lines',
                    flags: '-l, --lines [lines]',
                    description: 'returns the number of lines',
                },
                {
                    name: 'words',
                    flags: '-w, --words [words]',
                    description: 'returns the number of words',
                },
                {
                    name: 'chars',
                    flags: '-c, --chars [chars]',
                    description: 'returns the number of characters',
                },
            ],
        };
        return config;
    }
    onRun(stdin, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (command_1.hasArgs('chars', args)) {
                return String(this.chars(stdin));
            }
            if (command_1.hasArgs('words', args)) {
                return String(this.words(stdin));
            }
            if (command_1.hasArgs('lines', args)) {
                return String(this.lines(stdin));
            }
            if (command_1.hasArgs('lline', args)) {
                return String(this.longestLine(stdin));
            }
            return String(this.chars(stdin));
        });
    }
}
exports.default = Tp;
