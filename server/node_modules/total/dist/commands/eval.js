"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("lib/command");
const error_1 = require("lib/error");
const lines = (str) => str.split('\n');
class Eval {
    config() {
        const config = {
            name: 'eval',
            description: 'Evaluates the stdin in a javascript environment.',
            options: [
                {
                    name: 'function',
                    flags: '-f, --function [function]',
                    description: 'stdin is passed as arg of a function.',
                },
            ],
        };
        return config;
    }
    onRun(stdin, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!stdin)
                return stdin;
            if (!command_1.hasArgs('function', args))
                throw new error_1.InvalidArguments();
            const code = command_1.getArg('function', args).value;
            const wrappedCode = `(${code})("${lines(stdin).join(' \\\n')}")`;
            const result = eval(wrappedCode);
            return result;
        });
    }
}
exports.default = Eval;
