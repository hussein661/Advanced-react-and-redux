"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _glob = require('glob');
const fs = require("fs");
const util = require("util");
const path = require("path");
const _normalizePath = (fn) => {
    return (filePath, ...args) => {
        return fn.call(fn, path.join(__dirname, `../${filePath}`), ...args);
    };
};
const _getBodyFileName = (filename) => {
    return filename.match(/^(.*?)\.[A-z]{1,2}$/)[1];
};
const _stats = util.promisify(fs.stat);
const _read = util.promisify(fs.readFile);
const _appendPath = (path, fileName) => `${path}/${fileName}`;
const _load = _normalizePath((path) => __awaiter(this, void 0, void 0, function* () {
    const file = yield Promise.resolve().then(() => require(path));
    return file.default;
}));
const _stat = (path) => new Promise((resolve, reject) => {
    fs.stat(path, (error, result) => {
        if (error)
            return reject(error);
        resolve(result);
    });
});
exports.glob = (path) => {
    return new Promise((resolve, reject) => {
        _glob(path, {}, (err, files) => {
            if (err)
                reject(err);
            resolve(files);
        });
    });
};
exports.dir = _normalizePath((path, fullPath = false) => __awaiter(this, void 0, void 0, function* () {
    const files = fs.readdirSync(path);
    return fullPath ? files.map(_appendPath.bind(undefined, path)) : files;
}));
exports.load = (paths) => __awaiter(this, void 0, void 0, function* () {
    if (Array.isArray(paths))
        return Promise.all(paths.map((name) => {
            const fileName = _getBodyFileName(name);
            return _load(fileName);
        }));
    return _load(paths);
});
exports.read = (paths) => __awaiter(this, void 0, void 0, function* () {
    if (Array.isArray(paths))
        return Promise.all(paths.map((fileName) => _read(fileName)));
    return [_read(paths)];
});
exports.stats = (path) => __awaiter(this, void 0, void 0, function* () {
    if (Array.isArray(path))
        return Promise.all(path.map((filePath) => _stat(filePath)));
    return [_stat(path)];
});
